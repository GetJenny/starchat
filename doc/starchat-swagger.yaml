openapi: 3.0.2
servers:
  - url: 'https://virtserver.swaggerhub.com/angleto/StarChat/v5.3'
info:
  description: An Open Source, scalable conversational engine for B2B applications. You can find
    out more about StarChat at [starchat.ai](http://starchat.ai) or on
    [github GetJenny/starchat](https://github.com/GetJenny/starchat).
  version: "v5.3"
  title: StarChat APIs
  contact:
    email: angelo@getjenny.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: default
    description: non secured endpoints
  - name: admin
    description: Secured Admin-only endpoints
  - name: customer
    description: "Operations available to customer: the permissions are assigned to the user by the system administrator and some operation could not be available if only a specific subset of permissions is granted."
paths:
  /:
    get:
      summary: health check
      operationId: health_check
      description: respond if is healty
      responses:
        '200':
          description: the system is up and running
    post:
      tags:
        - admin
      summary: health check with versioning
      operationId: health_check_versions
      description: respond with the versions informations
      responses:
        '200':
          description: the system is up and running
  '/{index_name}/analyzer/playground':
    post:
      tags:
        - customer
      summary: test endpoint for analyzers
      operationId: post_analyzers_playground
      description: >-
        compile and evaluate an analyzers on the fly
        The index must exists.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: analyzer successfully evaluated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzerEvaluateResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
        '409':
          description: the document already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzerEvaluateRequest'
        description: Item to add
  '/{index_name}/index_management/create':
    post:
      tags:
        - admin
      summary: enable an instance to access to the specific language index
      operationId: post_index_management_create
      description: "add instance to the instance registry for the specific indexName"
      parameters:
        - in: path
          name: index_name
          description: "the name of the index: it must have the following format index_<organization>_<language>_<arbitrary suffix> e.g. index_getjenny_italian_usecase0"
          required: true
          schema:
            type: string
      responses:
        '201':
          description: instance successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/{index_name}/index_management/enable':
    post:
      tags:
        - admin
      summary: enable an instance
      operationId: post_index_management_enable
      description: "set the enabled flag to true in the instance registry"
      parameters:
        - in: path
          name: index_name
          description: "the name of the index: it must have the following format index_<organization>_<language>_<arbitrary suffix> e.g. index_getjenny_italian_usecase0"
          required: true
          schema:
            type: string
      responses:
        '201':
          description: instance successfully enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/{index_name}/index_management/disable':
    post:
      tags:
        - admin
      summary: disable an instance
      operationId: post_index_management_disable
      description: "set the enabled flag to false in the instance registry"
      parameters:
        - in: path
          name: index_name
          description: "the name of the index: it must have the following format index_<organization>_<language>_<arbitrary suffix> e.g. index_getjenny_italian_usecase0"
          required: true
          schema:
            type: string
      responses:
        '201':
          description: instance successfully disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/{index_name}/index_management':
    delete:
      tags:
        - admin
      summary: mark for delete an instance
      operationId: delete_index_management
      description: "set the delete flag to true in the instance registry"
      parameters:
        - in: path
          name: index_name
          description: "the name of the index: it must have the following format index_<organization>_<language>_<arbitrary suffix> e.g. index_getjenny_italian_usecase0"
          required: true
          schema:
            type: string
      responses:
        '201':
          description: instance successfully mark for deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    get:
      tags:
        - admin
      summary: get status informations about instance
      operationId: get_index_management
      description: "get status informations about the instance"
      parameters:
        - in: path
          name: index_name
          description: "the name of the index: it must have the following format index_<organization>_<language>_<arbitrary suffix> e.g. index_getjenny_italian_usecase0"
          required: true
          schema:
            type: string
      responses:
        '201':
          description: instance read succes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementStatusResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/language_index_management':
    post:
      tags:
        - admin
      summary: create new language specific starchat index set
      operationId: post_languahe_index_management
      description: "create the language specific starchat indexes, these indexes must be crested after the system
                    indexes and are required to create the instance indexes."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLanguageIndexRequest'
        description: "Index list to create, every index must have the following format index_<language> e.g. index_italian,
               if not evaluated, it will create all language indexes in configuration"
      responses:
        '201':
          description: index successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    get:
      tags:
        - admin
      summary: get the status of the starchat language specific indices
      operationId: get_language_index_management
      description: query and return the status of the starchat indices
      parameters:
        - in: query
          name: index_name
          description: "the name of the index: it must have the following format index_<language> e.g. index_italian"
          required: true
          schema:
            type: string
        - in: query
          name: indexSuffix
          description: >-
            the index suffix, if not specified the status for all the instance related tables will be retrieved. The suffixes can be specified in the configuration file, by default they can be -> logs_data, prior_data, question_answer, state, term
          example: state
          required: false
          schema:
            type: string
      responses:
        '200':
          description: information containing status of indicies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    delete:
      tags:
        - admin
      summary: delete a starchat language specific index
      operationId: delete_language_index_management
      description: >-
        delete all the starchat tables and all the data, the operation must be
        explicitly allowed from the configuration file
      parameters:
        - in: query
          name: index_name
          description: "the name of the index: it must have the following format index_<language> e.g. index_italian"
          required: true
          schema:
            type: string
        - in: query
          name: indexSuffix
          description: >-
            the index suffix, if not specified the status all the instance related tables will be deleted. The suffixes can be specified in the configuration file, by default they can be -> logs_data, prior_data, question_answer, state, term
          example: state
          required: false
          schema:
            type: string
      responses:
        '200':
          description: request successfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/language_index_management/open':
    post:
      tags:
        - admin
      summary: open a starchat index
      operationId: post_language_index_management_open
      description: open a index, write operations on schemas and data are permitted
      parameters:
        - in: query
          name: index_name
          description: "the name of the index: it must have the following format index_<language> e.g. index_italian"
          required: true
          schema:
            type: string
        - in: query
          name: indexSuffix
          description: the index suffix, if not specified all the instance related tables will be open
          example: action
          required: false
          schema:
            type: string
      responses:
        '200':
          description: index successfully open
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/language_index_management/close':
    post:
      tags:
        - admin
      summary: close an index
      operationId: post_language_index_management_close
      description: open a starchat system index, write operations on schemas and data are permitted
      parameters:
        - in: query
          name: index_name
          description: "the name of the index: it must have the following format index_<language> e.g. index_italian"
          required: true
          schema:
            type: string
        - in: query
          name: indexSuffix
          description: the index suffix, if not specified all the instance related tables will be closed
          example: action
          required: false
          schema:
            type: string
      responses:
        '200':
          description: index successfully closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/language_index_management/refresh':
    post:
      tags:
        - admin
      summary: refresh the starchat indices
      operationId: post_language_index_management_refresh
      description: refresh starchat indices
      parameters:
        - in: query
          name: index_name
          description: "the name of the index: it must have the following format index_<language> e.g. index_italian"
          required: true
          schema:
            type: string
        - in: query
          name: indexSuffix
          description: the index suffix, if not specified all the instance related tables will be refreshed
          example: action
          required: false
          schema:
            type: string
      responses:
        '200':
          description: index successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshIndexResults'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/language_index_management/mappings':
    put:
      tags:
        - admin
      summary: update starchat indices mappings
      operationId: put_language_index_management_mappings
      description: update the mappings for the starchat indices
      parameters:
        - in: query
          name: index_name
          description: "the name of the index: it must have the following format index_<language> e.g. index_italian"
          required: true
          schema:
            type: string
        - in: query
          name: indexSuffix
          description: the index suffix, if not specified all the instance related tables will be updated
          example: action
          required: false
          schema:
            type: string
      responses:
        '200':
          description: request successfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/language_index_management/settings':
    put:
      tags:
        - admin
      summary: update the settings for the starchat indices
      operationId: put_language_index_management_settings
      description: update the starchat indices settings
      parameters:
        - in: query
          name: index_name
          description: "the name of the index: it must have the following format index_<language> e.g. index_italian"
          required: true
          schema:
            type: string
        - in: query
          name: indexSuffix
          description: the index suffix, if not specified all the instance related tables will be updated
          example: action
          required: false
          schema:
            type: string
      responses:
        '200':
          description: request successfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  /system_index_management:
    get:
      tags:
        - admin
      summary: get the status of the system indices
      operationId: get_status_system_indices
      description: query and return the status of the system indices
      responses:
        '200':
          description: list of indices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    delete:
      tags:
        - admin
      summary: delete the system indices
      operationId: delete_system_indices
      description: >-
        delete all the system indices and all the data, the operation must be
        explicitly allowed from the configuration file
      parameters:
        - in: query
          name: indexSuffix
          description: >-
            the index suffix, if not specified the system indices will be deleted.
            The suffixes can be specified in the configuration file,
            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status
          example: user
          required: false
          schema:
            type: string
      responses:
        '200':
          description: request successfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/system_index_management/mappings':
    put:
      tags:
        - admin
      summary: update the mappings for the system indices
      operationId: put_system_index_management_mappings
      description: update the ES mapping for the system indices
      parameters:
        - in: query
          name: indexSuffix
          description: >-
            the index suffix, if not specified the system indices will be deleted.
            The suffixes can be specified in the configuration file,
            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status
          example: user
          required: false
          schema:
            type: string
      responses:
        '200':
          description: request successfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/system_index_management/settings':
    put:
      tags:
        - admin
      summary: update the settings for the system indices
      operationId: put_system_index_management_settings
      description: update the ES settings for the system indices
      parameters:
        - in: query
          name: indexSuffix
          description: >-
            the index suffix, if not specified the system indices will be deleted.
            The suffixes can be specified in the configuration file,
            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status
          example: user
          required: false
          schema:
            type: string
      responses:
        '200':
          description: request successfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/system_index_management/create':
    post:
      tags:
        - admin
      summary: create the system indices
      operationId: post_system_index_management_create
      description: create all the system tables
      parameters:
        - in: query
          name: indexSuffix
          description: >-
            the index suffix, if not specified the system indices will be deleted.
            The suffixes can be specified in the configuration file,
            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status
          example: user
          required: false
          schema:
            type: string
      responses:
        '201':
          description: index successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/system_index_management/refresh':
    post:
      tags:
        - admin
      summary: refresh the system indices
      operationId: post_system_index_management_refresh
      description: refresh all the system tables
      parameters:
        - in: query
          name: indexSuffix
          description: >-
            the index suffix, if not specified the system indices will be deleted.
            The suffixes can be specified in the configuration file,
            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status
          example: user
          required: false
          schema:
            type: string
      responses:
        '200':
          description: index successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshIndexResults'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/system_index_management/open':
    post:
      tags:
        - admin
      summary: open a starchat system index
      operationId: post_system_index_management_open
      description: open a starchat index, write operations on schemas and data are permitted
      parameters:
        - in: query
          name: indexSuffix
          description: >-
            the index suffix, if not specified the system indices will be deleted.
            The suffixes can be specified in the configuration file,
            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status
          example: user
          required: false
          schema:
            type: string
      responses:
        '200':
          description: index successfully open
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/system_index_management/close':
    post:
      tags:
        - admin
      summary: close a starchat system index
      operationId: post_system_index_management_close
      description: close a starchat system index, write operations on schemas and data are not permitted
      parameters:
        - in: query
          name: indexSuffix
          description: >-
            the index suffix, if not specified the system indices will be deleted.
            The suffixes can be specified in the configuration file,
            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status
          example: user
          required: false
          schema:
            type: string
      responses:
        '200':
          description: index successfully open
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexManagementResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/system_indices':
    get:
      tags:
        - admin
      summary: get the list of indices
      operationId: get_all_indices
      description: get the complete list of indices
      responses:
        '200':
          description: list of indices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfIndices'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  /user:
    post:
      tags:
        - admin
      summary: add a new system user
      operationId: add_system_user
      description: Adds a system user
      responses:
        '201':
          description: document created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
        '409':
          description: the document already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to add
    put:
      tags:
        - admin
      summary: update a system user
      operationId: update_system_user
      description: update an existing system user
      parameters:
        - in: path
          name: id
          description: id of the user to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the document was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        description: Item to be updated
  '/user/get':
    post:
      tags:
        - admin
      summary: retrieve system users
      operationId: get_system_user
      description: |
        retrieve a system user
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
        description: user id
  '/user/delete':
    post:
      tags:
        - admin
      summary: delete system user
      operationId: delete_system_user
      description: |
        delete a system user
      responses:
        '200':
          description: the document was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
        description: user id
  '/user/generate':
    post:
      tags:
        - admin
      summary: generate a user record
      operationId: gen_system_user
      description: >-
        generate a system user from username, password and permissions, it
        return a user data structure with salted hashed password and which can be added to the users.
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        description: >-
          User data, at least the id and a clear text password and permissions should be
          specified
  '/cluster_node':
    get:
      tags:
        - admin
      summary: retrieve informations about cluster nodes
      operationId: get_alive_nodes
      description: >-
        retrieve all the alive nodes of the cluster
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNodes'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    post:
      tags:
        - admin
      summary: set information about cluster nodes
      operationId: post_cluster_node
      description: set the alive timestamp for the node (automatically done by a starchat cron job)
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNode'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    delete:
      tags:
        - admin
      summary: remove dead nodes from the list of available nodes (automatically done by a starchat cron job)
      operationId: delete_cluster_node
      description: remove from the alive nodes list those nodes with a too old timestamp
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNode'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/cluster_node/<uuid>':
    get:
      tags:
        - admin
      summary: retrieve informations about a cluster node
      operationId: get_cluster_node_uuid
      description: retrieve informations about a cluster node
      parameters:
        - in: path
          name: uuid
          description: "cluster node id"
          required: true
          schema:
            type: string
          example: "bcd19c7c-cd0e-4210-b705-84d2d6483caa"
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNode'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/node_dt_update':
    get:
      tags:
        - admin
      summary: retrieve the dt loading status of a node
      operationId: get_node_dt_update
      description: >-
        calculate if all the decision tables of the cluster were loaded by the node,
        can be used as an Health Check on start-up before the registration of a new node on the load balancer
      parameters:
        - in: query
          name: verbose
          description: when set to true the list of indices is returned
          required: false
          schema:
            type: boolean
        - in: query
          name: strict
          description: if true return 400 if the test fail
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeLoadingAllDtStatus'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: >-
            authorization denied or authentication failed
    post:
      tags:
        - admin
      summary: set informations about the decision table update operations performed by a cluster node
      operationId: post_node_dt_update
      description: set the alive timestamp for the node (automatically done when triggering a decision table reloading)
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNode'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeDtLoadingStatus'
        description: informations to be registered for the given decision table, and cluster node
    delete:
      tags:
        - admin
      summary: delete decision table loading records for dead nodex (automatically done by a starchat cron job)
      operationId: delete_node_dt_update
      description: remove from the alive nodes list those nodes with a too old timestamp
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentsSummaryResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/node_dt_update':
    get:
      tags:
        - customer
      summary: test if an index is up to date on all the cluster nodes
      operationId: get_idx_node_dt_update
      description: >-
        retrieve the status of the loading process of a decision table on all the starchat's cluster nodes.
        The index must exists and the customer has write permissions on it.
      parameters:
        - in: path
          name: index_name
          description: "index name"
          required: true
          schema:
            type: string
          example: "index_getjenny_english_usecase0"
        - in: query
          name: strict
          description: if true return 400 if the test fail
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: request succesfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterLoadingDtStatusIndex'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/get_next_response':
    post:
      tags:
        - customer
      summary: conversation endpoint
      operationId: post_get_next_response
      description: ask to starchat for a response . The index must exists and the customer has write permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseRequestOutOperationResult'
        '204':
          description: 'no content: not response could be provided'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
        '202':
          description: an explicitly rewuested state was not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseRequestIn'
        description: DecisionTable entry to create
  '/<index_name>/decisiontable':
    post:
      tags:
        - customer
      summary: insert a document in the DecisionTable
      operationId: post_decisiontable
      description: insert a document in the DecisionTable. The index must exists and the customer has write permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: query
          name: refresh
          description: when set to 1 StarChat force an index refresh (default is 1)
          required: false
          schema:
            type: number
            format: integer
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DTDocument'
        description: DecisionTable entry to create
    put:
      tags:
        - customer
      summary: update a document in the DecisionTable
      operationId: put_decisiontable
      description: update a document in the DecisionTable. The index must exists and the customer has write permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: query
          name: refresh
          description: when set to 1 StarChat force an index refresh
          required: false
          schema:
            type: number
            format: integer
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DTDocumentUpdate'
        description: DecisionTable entry to create
    get:
      tags:
        - customer
      summary: get one or more entries from the DecisionTable
      operationId: get_decisiontable
      description: get documents from the DecisionTable. The index must exists and the customer has read permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: IDs of the items to fetch, required if dump is not specified
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: dump
          in: query
          description: dump the whole decision table, required if id is not specified
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDTDocumentsResults'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    delete:
      tags:
        - customer
      summary: delete one or more entries from the DecisionTable
      operationId: delete_decisiontable_ids
      description: delete documents from the DecisionTable. The index must exists and the customer has write permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: >-
            IDs of the items to delete
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentsResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/decisiontable/all':
    delete:
      tags:
        - customer
      summary: delete all entries from the DecisionTable
      operationId: delete_decisiontable_all
      description: delete all documents from the DecisionTable. The index must exists and the customer has write permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentsSummaryResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/decisiontable/search':
    post:
      tags:
        - customer
      summary: search items on DecisionTable
      operationId: post_decisiontable_search
      description: search documents from the DecisionTable. The index must exists and the customer has read permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDTDocumentsResults'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DTDocumentSearch'
        description: DecisionTable document with the query parameters
  '/<src_index_name>/decisiontable/clone/<dst_index_name>':
    post:
      tags:
        - customer
      operationId: post_decisiontable_clone_index
      summary: Clone a index
      description: >-
        Clone a index content into another index, the destination index is cleaned
      parameters:
        - in: path
          name: src_index_name
          description: name of the index to be cloned
          required: true
          schema:
            type: string
        - in: path
          name: dst_index_name
          description: name of the destination index
          required: true
          schema:
            type: string
        - in: query
          name: reset
          description: reset the destination index before cloning the data
          required: false
          schema:
            type: boolean
            default: true
        - in: query
          name: propagate
          description: trigger the update propagation by setting the update timestamp
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentListResult'
        '400':
          description: 'invalid input, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/decisiontable/bulk':
    post:
      tags:
        - customer
      operationId: post_decisiontable_bulk_create
      summary: Bulk creation
      description: >-
        bulk create operation
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DTDocument'
        description: The array of states to create.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentListResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/decisiontable/upload/<format>':
    post:
      tags:
        - customer
      operationId: post_decisiontable_upload
      summary: Uploads a file on the decision table
      description: >-
        Uploads a file on the decision table, the file must have an header
        with the name of the DTDocument entries
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: format
          description: 'the file format, supported only: csv or json (json dump format)'
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                csv:
                  type: string
                  format: binary
        description: The file to upload.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentListResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/decisiontable/analyzer/async':
    post:
      tags:
        - customer
      summary: trigger an asyncronous update of the DecisionTable
      operationId: post_decisiontable_analyzer_async
      description: trigger an asyncronous update of the in-memory runtime DecisionTable
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '202':
          description: request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DtReloadTimestamp'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/decisiontable/analyzer':
    post:
      tags:
        - customer
      summary: trigger an update of the DecisionTable
      operationId: post_decisiontable_analyzer
      description: trigger an update of the in-memory runtime DecisionTable
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: query
          name: propagate
          description: trigger the update propagation by setting the update timestamp
          required: false
          schema:
            type: boolean
            default: true
        - in: query
          name: incremental
          description: execute an incremental update insteand of compiling all the analyzers, default is true
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTAnalyzerLoad'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    get:
      tags:
        - customer
      summary: return the runtime list of analyzers
      operationId: get_decisiontable_analyzer
      description: "collect and return the list of in memory, compiled analyzers for a given index"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTAnalyzerMap'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/decisiontable/bayescache/async':
    post:
      tags:
        - customer
      summary: trigger an async update of the bayes operator cache
      operationId: post_decisiontable_bayescache_async
      description: trigger an async update of the bayes operator cache
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BayesOperatorCacheServiceResponse'
        '400':
          description: 'bad request - error during loading execution'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BayesOperatorCacheServiceResponse'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/decisiontable/bayescache':
    post:
      tags:
        - customer
      summary: trigger update of the bayes operator cache
      operationId: post_decisiontable_bayescache
      description: trigger an update of the bayes operator cache
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BayesOperatorCacheServiceResponse'
        '400':
          description: 'bad request - error during loading execution'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BayesOperatorCacheServiceResponse'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/spellcheck/terms':
    post:
      tags:
        - customer
      summary: spellchecker a sentence
      operationId: post_spellcheck
      description: execute the spellchecker on a sentence and returns the suggestion for each token
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellcheckTermsResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpellcheckTermsRequest'
        description: Spellcheck request
  '/<index_name>/language_guesser':
    post:
      tags:
        - customer
      summary: guess the language of a sentence
      operationId: post_language_guesser
      description: guess the language out from a sentence
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageGuesserRequestOut'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageGuesserRequestIn'
        description: Language guesser request
  '/<index_name>/language_guesser/<language>':
    get:
      tags:
        - customer
      summary: check if a language is supported by the guesser
      operationId: get_language_guesser_language
      description: ask StarChat if a language is supported or not by the guesser
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: language
          description: language to be checked (an ISO 639-1 code)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageGuesserInformations'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/tokenizers':
    post:
      tags:
        - customer
      summary: tokenize a text
      operationId: post_tokenizers
      description: transform a text into an array of tokeks, allow to choose between different tokenizers
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenizerResponse'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenizerQueryRequest'
        description: Tokenizer request
    get:
      tags:
        - customer
      summary: retrieve the supported tokenizers
      operationId: get_tokenizers
      description: retrieve the list of tokenizers supported by StarChat
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenizersSet'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/stream/term':
    get:
      tags:
        - customer
      summary: get all terms as http stream
      operationId: get_stream_term
      description: get all the terms from a terms table
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/term/index':
    post:
      tags:
        - customer
      summary: index terms
      operationId: post_term_index
      description: index terms
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentListResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Terms'
        description: Terms to index
  '/<index_name>/term/distance':
    post:
      tags:
        - customer
      summary: distance betwen terms
      operationId: post_term_distance
      description: calculate the distance between terms
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTermsDistanceRes'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocsIds'
            example: {'ids': ['hello', 'hi']}
        description: Documents to compare
  '/<index_name>/term/index_default_synonyms':
    post:
      tags:
        - customer
      summary: index default synonyms set
      operationId: post_term_index_default_synonyms
      description: index the default synonyms set
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentsResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/term/index_synonyms':
    post:
      tags:
        - customer
      operationId: post_term_index_synonyms_csv
      summary: "Uploads a set of synonyms on a term table"
      description: "Uploads a set of synonyms on a term table: (a csv with columns type,term,associatedTerms)"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                csv:
                  type: string
                  format: binary
        description: The file to upload.
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentsResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/term/get':
    post:
      tags:
        - customer
      operationId: post_term_get
      summary: "retrieve terms"
      description: "retrieve a list of terms from the terms table"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocsIds'
            example: {'ids': ['hello']}
        description: Documents to get
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Terms'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/term/delete':
    post:
      tags:
        - customer
      operationId: post_term_delete
      summary: "delete terms"
      description: "delete a list of terms from the terms table, if the ids list is empty will delete all terms"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocsIds'
            example: {'ids': ['hello']}
        description: Documents to get
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentsResult'
              example: {
                "data": [
                {
                  "index": "index_getjenny_english_usecase0",
                  "id": "hello",
                  "version": 1,
                  "found": true
                }
                ]
              }
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/term':
    put:
      tags:
        - customer
      operationId: put_term
      summary: "update terms"
      description: "update term documents"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Terms'
        description: Documents to update
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentsResult'
              example: {
                "data": [
                {
                  "index": "index_getjenny_english_usecase0",
                  "id": "hello",
                  "version": 3,
                  "found": true
                }
                ]
              }
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/term/term':
    post:
      tags:
        - customer
      operationId: post_term_term
      summary: "search terms"
      description: "search terms using single token query"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTerm'
        description: term query
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsResults'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/term/text':
    post:
      tags:
        - customer
      operationId: post_term_text
      summary: "search terms"
      description: "search all terms of a text"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: query
          name: analyzer
          description: "the tokenizer to use (see TokenizersSet data structure for the available tokenizers)"
          required: false
          example: "space_punctuation"
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: hello, this is my query
        description: term query
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsResults'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/extraction/frequencies':
    post:
      tags:
        - customer
      operationId: post_extraction_frequencies
      summary: "frequency stats extraction from text"
      description: "extract terms frequencies stats from a text"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TermsExtractionRequest'
        description: Terms extraction request with text
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenFrequency'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/extraction/keywords':
    post:
      tags:
        - customer
      operationId: post_extraction_keywords
      summary: "extract keywords"
      description: "extract keywords from a text"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TermsExtractionRequest'
        description: Terms extraction request
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: number
                  format: double
                  description: the keyword extraction score, index is the term
                example: {"morning": 0.3, "question": 0.6}
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/extraction/synonyms':
    post:
      tags:
        - customer
      operationId: post_extraction_synonyms
      summary: "extract synonyms"
      description: "extract synonyms from a text"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynExtractionRequest'
        description: synonyms extraction request
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SynonymExtractionItem'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/analytics/<qa_route>':
    post:
      tags:
        - customer
      operationId: post_analytics_qa_route
      summary: "aggregated analytics on QA"
      description: "calculates analytics for the question/answers table"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      requestBody:
        description: analytics request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QAAggregatedAnalyticsRequest'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QAAggregatedAnalytics'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/term_count/<qa_route>':
    get:
      tags:
        - customer
      operationId: get_term_count_qa_route
      summary: "term count"
      description: "count the occurrence of a term in documents and corpus"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
        - in: query
          name: field
          description: the fields to consider in counting, default is 'all'
          example: 'question'
          schema:
            $ref: '#/components/schemas/TermCountFields'
        - in: query
          name: term
          required: true
          description: the term to count
          example: 'hello'
          schema:
            type: string
        - in: query
          name: stale
          description: set a cache time limit (interval in millis), if the value is older it is recalculated, default is 0
          example: 10
          schema:
            type: number
            format:  long
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermCount'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/dict_size/<qa_route>':
    get:
      tags:
        - customer
      operationId: get_dict_size_qa_route
      summary: "terms count dictionary size"
      description: "calculate the dictionary size (total number of unique terms)"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
        - in: query
          name: stale
          description: set a cache time limit (interval in millis), if the value is older it is recalculated, default is 0
          example: 10
          schema:
            type: number
            format:  long
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DictSize'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/total_terms/<qa_route>':
    get:
      tags:
        - customer
      operationId: get_total_terms_qa_route
      summary: "total terms count"
      description: "total terms count"
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
        - in: query
          name: stale
          description: set a cache time limit (interval in millis), if the value is older it is recalculated
          example: 10
          schema:
            type: number
            format:  long
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalTerms'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/stream/<qa_route>':
    get:
      tags:
        - customer
      summary: get all QA documents
      operationId: get_stream_qa_route
      description: get all QuestionAnswer entries as http stream
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QADocument'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
  '/<index_name>/<qa_route>':
    post:
      tags:
        - customer
      summary: insert QA documents
      operationId: post_qa_route
      description: insert a QA document
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
        - in: query
          name: refresh
          description: when set to 1 StarChat force an index refresh
          required: false
          schema:
            type: number
            format: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QADocument'
        description: QA document request
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    get:
      tags:
        - customer
      summary: get QA documents
      operationId: get_qa_route
      description: retrieve QA documents
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
        - name: id
          in: query
          description: IDs of the items to fetch
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: request successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchQADocumentsResults'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    delete:
      tags:
        - customer
      summary: delete one or more entries from the QA table
      operationId: delete_qa_route
      description: >-
        delete documents from the QA table. The index must exists and the customer has write permissions on it.
        If no ids are specified all documents will be deleted.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocsIds'
        description: list of documents id to delete
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentsResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    put:
      tags:
        - customer
      summary: bulk update documents in the QA table
      operationId: put_qa_route
      description: bulk update of document in the QA table. The index must exists and the customer has write permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentsResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QADocumentUpdate'
        description: QA entry with new fields
  '/<index_name>/<qa_route>/search':
    post:
      tags:
        - customer
      summary: search (or count) documents on the QA table
      operationId: post_qa_route_search
      description: >-
        Search documents in the QA table. The index must exists and the customer has read permissions on it.
        To just count the matching documents set the size parameter to 0, no documents will be returned.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchQADocumentsResults'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QADocumentSearch'
        description: QA document search entity
  '/<index_name>/<qa_route>/conversations':
    post:
      tags:
        - customer
      summary: retrieve conversations on the QA table
      operationId: post_qa_route_conversations
      description: >-
        given a list of conversation IDs retrieve the conversations from a QA table
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversations'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocsIds'
        description: The list of conversation IDs
    put:
      tags:
        - customer
      summary: update by query documents in the QA table
      operationId: put_qa_byquery_route
      description: update by query documents in the QA table. The index must exists and the customer has write permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentsResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQAByQueryReq'
        description: QA entry with new fields, the id field must be an empty list
  '/<index_name>/updateTerms/<qa_route>':
    put:
      tags:
        - customer
      summary: update the manaus terms for a document
      operationId: put_updateTerms_qa_route
      description: update the manaus term (relevant terms) for a document in the QA table. The index must exists and the customer has write permissions on it.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentsResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQATermsRequest'
        description: manaus terms update request
    post:
      tags:
        - customer
      summary: update the manaus terms for the whole QA table
      operationId: post_updateTerms_qa_route
      description: update the manaus term (relevant terms) for all documents in the QA table. The index must exists and the customer has write permissions on it. Returns a stream of update results.
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQATermsRequest'
        description: manaus terms update request
  '/<index_name>/cache/<qa_route>':
    delete:
      tags:
        - admin
      summary: reset the terms count cache
      operationId: delete_cache_qa_route
      description: delete the terms counters cache and returns the cache configuration parameters
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/CountersCacheParameters'
                    - $ref: '#/components/schemas/CountersCacheSize'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    get:
      tags:
        - admin
      summary: get the terms count cache parameters
      operationId: get_cache_qa_route
      description: get the terms counters cache parameters
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountersCacheParameters'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
    post:
      tags:
        - admin
      summary: set terms stats cache parameters
      operationId: post_cache_qa_route
      description: set parameters for terms stats
      parameters:
        - in: path
          name: index_name
          description: name of the index
          required: true
          schema:
            type: string
        - in: path
          name: qa_route
          description: question anser route
          required: true
          schema:
            type: string
            enum:
              - conversation_logs
              - knowledgebase
              - prior_data
      responses:
        '200':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentResult'
        '400':
          description: 'invalid input, object invalid, bad request'
        '401':
          description: authorization denied or authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountersCacheParameters'
        description: cache parameters
components:
  schemas:
    CreateLanguageIndexRequest:
      type: object
      required:
        - languageList
      properties:
        languageList:
          type: array
          description: a list containing all language indexes that user want to create
          items:
            type: string
    AnalyzerEvaluateRequest:
      type: object
      required:
        - analyzer
        - query
      properties:
        stateName:
          type: string
          description: a state name used by some analyzers, if unset playground will be used as default
          example: "statename"
        analyzer:
          type: string
          description: the analyzer expression
          example: 'keyword("test")'
        query:
          type: string
          description: the query for the evaluation
          example: 'test of the analyzers'
        data:
          $ref: '#/components/schemas/AnalyzersData'
        evaluationClass:
          type: string
          description: an avaluation class, used to filter analyzers during evaluation
          example: "default"
          default: "default"
        searchAlgorithm:
          $ref: '#/components/schemas/SearchAlgorithm'
    AnalyzerEvaluateResponse:
      type: object
      required:
        - build
        - value
        - buildMessage
      properties:
        build:
          type: boolean
          description: the analyzer is well formed and was compiled
          example: true
        value:
          type: number
          format: double
          description: the evaluation score
          example: 0.75
        data:
          $ref: '#/components/schemas/AnalyzersData'
        buildMessage:
          type: string
          description: a message with information about the analyzer building process
          example: "success"
          default: "default"
    AnalyzersData:
      required:
        - traversedStates
        - extractedVariables
      properties:
        traversedStates:
          type: array
          description: the history of traversed states
          default: empty list
          items:
            type: string
          example:
            - start
            - welcome
            - get_name
        extractedVariables:
          type: object
          description: the variables extracted by StarChat or generated by the analyzers
            to used for the analyzer evaluation the name is an arbitrary ascii string
          additionalProperties:
            type: string
          example: {"name": "Donald Duck", "job": "idle"}
    IndexManagementResponse:
      type: object
      properties:
        message:
          type: string
          description: a response message for the index management operations
          example: message from the index
        check:
          type: boolean
          description: check value
          example: true
    IndexManagementStatusResponse:
      type: object
      properties:
        message:
          type: string
          description: a response message for the index management operations
          example: Index check for instance X
        status:
          type: string
          description: describe instance's status
          enum:
            - Missing
            - MarkedForDeletion
            - Enabled
            - Disabled
          example: Enabled
    FailedShards:
      type: object
      properties:
        index_name:
          type: string
          description: name of the index
          example: index_getjenny_italian_usecase0.user
        shard_id:
          type: number
          format: integer
          description: id of the shard
          example: 1
        status:
          type: number
          format: integer
          description: status of the shard
          example: 0
    RefreshIndexResult:
      type: object
      properties:
        index_name:
          type: string
          description: name of the index
          example: index_getjenny_italian_usecase0.state
        failed_shards_n:
          type: number
          format: integer
          description: number of failed shards
          example: 0
        successful_shards_n:
          type: number
          format: integer
          description: number of successful shards
          example: 5
        total_shards_n:
          type: number
          format: integer
          description: total number of shards
          example: 5
        failed_shards:
          type: array
          items:
            $ref: '#/components/schemas/FailedShards'
    RefreshIndexResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/RefreshIndexResult'
    ListOfIndices:
      type: array
      items:
        type: string
      example:
        - "index_getjenny_english_0.prior_data"
        - "index_getjenny_english_common_0.question_answer"
        - "index_getjenny_english_common_0.term"
        - "index_getjenny_english_common_0.logs_data"
        - "index_getjenny_english_0.state"
        - "index_getjenny_english_common_0.prior_data"
        - "index_getjenny_english_common_0.state"
        - "index_getjenny_english_0.term"
        - "index_getjenny_english_0.question_answer"
        - "index_getjenny_english_0.logs_data"
    IndexDocumentResult:
      type: object
      required:
        - index
        - id
        - version
        - created
      properties:
        index:
          type: string
          description: name of the index
          example: index_getjenny_italian_usecase0.state
        id:
          type: string
          description: document id
          example: index_getjenny_italian_usecase0.state
        version:
          type: number
          format: integer
          description: document version
          example: 10
        created:
          type: boolean
          description: whether the document was created or not
          example: true
    IndexDocumentListResult:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IndexDocumentResult'
    DTDocument:
      type: object
      required:
        - state
        - executionOrder
        - maxStateCount
        - analyzer
        - queries
        - bubble
        - action
        - actionInput
        - stateData
        - successValue
        - failureValue
      properties:
        state:
          type: string
          description: a unique name of the state
          example: forgot_password
        executionOrder:
          type: number
          format: integer
          description: specify an order of evaluation for analyzers the lower is the number earlier is the evaluation of the state
          example: 0
        maxStateCount:
          type: number
          format: integer
          description: defines how many times StarChat can repropose the state during a conversation. 0 means no limits
          example: 0
        analyzer:
          type: string
          description: an analyzer expression evaluated to trigger the state
          example: 'keyword("password")'
        queries:
          type: array
          items:
            type: string
          example:
            - I forgot my password
            - my password is wrong
            - don't remember the password
        bubble:
          type: string
          description: content, if any, to be shown to the user. It may contain variables like %email% or %link%.
          example: Hello %name%, how can I help you?
        action:
          type: string
          description: a function to be called on the client side. StarChat developer must provide types of input and output (like an abstract method), and the GUI developer is responsible for the actual implementation (e.g. show_button)
          example: "show_button"
        actionInput:
          $ref: '#/components/schemas/actionInput'
        stateData:
          type: object
          description: a dictionary of strings with arbitrary data to pass along
          additionalProperties:
            type: string
          example: {"url": "www.getjenny.com"}
        successValue:
          type: string
          description: a state name for the client to set the next state in case the evaluated function succeed
          example: "ask_feedback"
        failureValue:
          type: string
          description: a state name for the client to set the next state in case the evaluated function fail
          example: "dont_understand"
        evaluationClass:
          type: string
          description: the evaluation class for the state, used to apply filters during evaluation
          example: default
        version:
          type: number
          format: integer
          description: the version of the document, this field is automatically calculated and should not be used for indexing requests.
          example: 12
    DTDocumentUpdate:
      type: object
      required:
        - state
      properties:
        state:
          type: string
          description: a unique name of the state
          example: forgot_password
        executionOrder:
          type: number
          format: integer
          description: specify an order of evaluation for analyzers the lower is the number earlier is the evaluation of the state
          example: 0
        maxStateCount:
          type: number
          format: integer
          description: defines how many times StarChat can repropose the state during a conversation. 0 means no limits
          example: 0
        analyzer:
          type: string
          description: an analyzer expression evaluated to trigger the state
          example: 'keyword("password")'
        queries:
          type: array
          items:
            type: string
          example:
            - I forgot my password
            - my password is wrong
            - don't remember the password
        bubble:
          type: string
          description: content, if any, to be shown to the user. It may contain variables like %email% or %link%.
          example: Hello %name%, how can I help you?
        action:
          type: string
          description: a function to be called on the client side. StarChat developer must provide types of input and output (like an abstract method), and the GUI developer is responsible for the actual implementation (e.g. show_button)
          example: "show_button"
        actionInput:
          $ref: '#/components/schemas/actionInput'
        stateData:
          type: object
          description: a dictionary of strings with arbitrary data to pass along
          additionalProperties:
            type: string
          example: {"url": "www.getjenny.com"}
        successValue:
          type: string
          description: a state name for the client to set the next state in case the evaluated function succeed
          example: "show_buttons"
        failureValue:
          type: string
          description: a state name for the client to set the next state in case the evaluated function fail
          example: "dont_understand"
        evaluationClass:
          type: string
          description: the evaluation class for the state, used to apply filters during evaluation
          example: default
    DTAnalyzerLoad:
      type: object
      properties:
        numOfEntries:
          type: number
          format: integer
          description: number of analyzers in memory
          example: 134
    DtReloadTimestamp:
      type: object
      required:
        - indexName
        - timestamp
      properties:
        indexName:
          type: string
          example: index_getjenny_english_0
        timestamp:
          type: number
          format: long
          example: 1549283768918
    DTAnalyzerItem:
      type: object
      properties:
        analyzer:
          type: string
          description: the analyzer expression
          example: 'keyword("password")'
        build:
          type: boolean
          description: whether the analyzer was well formed and successfully compiled
          example: true
        executionOrder:
          type: number
          format: integer
          description: entry execution  order
          example: 0
        evaluationClass:
          type: string
          description: the evaluation class for the state, used to apply filters during evaluation
          example: default
    DTAnalyzerMap:
      type: object
      properties:
        analyzerMap:
          type: object
          description: dictionary with analyzers, the key is the state name
          additionalProperties:
            $ref: '#/components/schemas/DTAnalyzerItem'
      example: {"analyzerMap": {"state_name_0": '$ref: "#/components/schemas/DTAnalyzerItem"' }}
    SearchDTDocument:
      type: object
      properties:
        score:
          type: number
          format: double
          description: the search relevance score
          example: 0.1
        document:
          $ref: '#/components/schemas/DTDocument'
    SearchDTDocumentsResults:
      type: object
      properties:
        total:
          type: number
          format: integer
          description: the number of entries
          example: 10
        maxScore:
          type: number
          format: double
          description: the max document relevance score
          example: 0.7
        hits:
          type: array
          description: the list of retrieved documents
          items:
            $ref: '#/components/schemas/SearchDTDocument'
    UpdateDocumentResult:
      type: object
      properties:
        index:
          type: string
          description: the index name
          example: index_getjenny_english_usecase0
        id:
          type: string
          description: the document id
          example: state_1234
        version:
          type: number
          format: integer
          description: the document version after the update
          example: 13
        created:
          type: boolean
          description: whether the document was created or just updated
          example: false
    UpdateDocumentsResult:
      type: object
      properties:
        data:
          type: array
          description: a list of update document results
          items:
            $ref: '#/components/schemas/UpdateDocumentResult'
    ResponseRequestInUserInput:
      type: object
      properties:
        text:
          type: string
          description: the user query
          example: "Hello, I would like to reset my password, is it possible?"
        img:
          type: string
          description: a base64 picture, currently not supported by the analyzers
          example: "aGVsbG8K="
    ResponseRequestIn:
      type: object
      required:
        - conversationId
      properties:
        conversationId:
          type: string
          description: the id of the conversation
          example: "conv_12131"
        traversedStates:
          type: array
          description: the history of traversed states
          items:
            type: string
          example:
            - "state_0"
            - "state_1"
            - "state_3"
        userInput:
          $ref: '#/components/schemas/ResponseRequestInUserInput'
        state:
          type: array
          description: request a specific state
          items:
            type: string
          example:
            - "welcome_state1"
            - "welcome_state2"
            - "welcome_state3"
        data:
          type:  object
          description: the variables passed to StarChat, they may be used by the analyzers and to complete the templates.
          additionalProperties:
            type: string
          example: {"name": "Donald Duck", "job": "idle"}
        threshold:
          type: number
          format: double
          description: the minimum match threshold
          default: 0.0
        evaluationClass:
          type: string
          description: the evaluation class, enable the evaluation only on the analyzer with a specific class
          example: "default"
          default: "default"
        maxResults:
          type: number
          format: integer
          description: the max number of results to return, ordered by score
          default: 2
        searchAlgorithm:
          $ref: '#/components/schemas/SearchAlgorithm'
    ReturnMessageData:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          format: integer
          description: an operation code, 200 if there are no errors
          example: 200
        message:
          type: string
          description: a message in case of errors
          example: ""
    ResponseRequestOut:
      type: object
      required:
        - conversationId
        - state
        - traversedStates
        - maxStateCount
        - analyzer
        - bubble
        - action
        - data
        - actionInput
        - stateData
        - successValue
        - failureValue
        - score
      properties:
        conversationId:
          type: string
          description: the id of the conversation
          example: "conv_12131"
        state:
          type: string
          description: state name
          example: "state_4"
        traversedStates:
          type: array
          description: the history of traversed states
          items:
            type: string
          example:
            - "state_0"
            - "state_1"
            - "state_3"
            - "state_4"
        maxStateCount:
          type: number
          format: integer
          description: the max number of times the state can be evaluated
          default: 0
        analyzer:
          type: string
          description: the analyzer expression
          example: 'keyword("password")'
        data:
          type:  object
          description: the variables passed to StarChat plus the variable eventually extracted by the analyzers
          additionalProperties:
            type: string
          example: {"name": "Donald Duck", "job": "idle"}
        bubble:
          type: string
          description: the message to display
          example: "Hello Donald Duck, I just sent you an email with a link to reset the password"
        action:
          type: string
          description: a function to be called on the client side. StarChat developer must provide types of input and output (like an abstract method), and the GUI developer is responsible for the actual implementation (e.g. show_button)
          example: "show_button"
        actionInput:
          $ref: '#/components/schemas/actionInput'
        stateData:
          type: object
          description: a dictionary of strings with arbitrary data to pass along
          additionalProperties:
            type: string
          example: {"url": "www.getjenny.com"}
        successValue:
          type: string
          description: a state name for the client to set the next state in case the evaluated function succeed
          example: "ask_feedback"
        failureValue:
          type: string
          description: a state name for the client to set the next state in case the evaluated function fail
          example: "dont_understand"
        score:
          type: number
          format: double
          description: the score for the state
          example: 0.83
    ResponseRequestOutOperationResult:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/ReturnMessageData'
        responseRequestOut:
          type: array
          items:
            $ref: '#/components/schemas/ResponseRequestOut'
    DeleteDocumentResult:
      type: object
      properties:
        index:
          type: string
          description: index name
          example: index_getjenny_english_usecase0
        id:
          type: string
          description: the document id
          example: id0001
        version:
          type: number
          format: integer
          description: document version
          example: 2
        found:
          type: boolean
          description: whether the document was found or not
          example: true
    DeleteDocumentsResult:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DeleteDocumentResult'
    DeleteDocumentsSummaryResult:
      type: object
      properties:
        message:
          type: string
          description: a message from the delete functions
          example: delete
        deleted:
          type: number
          format: integer
          description: the number of documents deleted
          example: 561
    DTDocumentSearch:
      type: object
      properties:
        from:
          type: number
          format: integer
          description: first result from a paginated list
          example: 0
        size:
          type: number
          format: integer
          description: how many results to be returned
          example: 10
        executionOrder:
          type: number
          format: integer
          description: search items with a specific execution order
          example: 1
        minScore:
          type: number
          format: double
          description: min score threshold for the results
          example: 0.7
        boostExactMatchFactor:
          type: number
          format: double
          description: apply a score boost for exact matching items (only for queries field)
          example: 1000.0
        state:
          type: string
          description: "a state name"
          example: "renew_insurance"
        evaluationClass:
          type: string
          description: "the evaluation class"
          example: "default"
        queries:
          type: string
          description: "a query"
          example: "hello, when should I renew my insurance?"
        searchAlgorithm:
          $ref: '#/components/schemas/SearchAlgorithm'
    permission:
      type: string
      description: permissions for the endpoints
      enum:
        - admin
        - read
        - write
        - stream
      example: admin
    User:
      required:
        - id
        - password
        - salt
        - permissions
      properties:
        id:
          type: string
          description: an id of the system user
          example: test_user
        password:
          type: string
          description: a salted sha512 password
          example: >-
            374f6caba1c8e8980a63752ac01a079cfb6a29bbdcce67bb2a78a66dbd5fe02b67422b5badbeddac34750be610f1852770a8457293f94657a5cd1c6d118b25ef
        salt:
          type: string
          description: the salt used to verify the password
          example: '120837371'
        permissions:
          type: object
          description: association (index_name, list of permissions)
          additionalProperties:
            type: array
            description: the list of permissions for the user on a specific index, the key is the index
            items:
              $ref: '#/components/schemas/permission'
            example:
              - read
              - write
    UserUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: user id
          example: user123
        password:
          type: string
          description: a salted sha512 password
          example: >-
            374f6caba1c8e8980a63752ac01a079cfb6a29bbdcce67bb2a78a66dbd5fe02b67422b5badbeddac34750be610f1852770a8457293f94657a5cd1c6d118b25ef
        salt:
          type: string
          description: the salt used to verify the password
          example: '120837371'
        permissions:
          type: object
          description: association (index_name, list of permissions)
          additionalProperties:
            type: array
            description: the list of permissions for the user on a specific index, the key is the index
            items:
              $ref: '#/components/schemas/permission'
            example:
              - stream
              - read
    UserId:
      type: object
      properties:
        id:
          type: string
          description: user id
          example: user123
    ClusterNode:
      type: object
      required:
        - uuid
        - alive
        - timestamp
      properties:
        uuid:
          type: string
          description: unique identifier of the cluster node
          example: "535096c7-5e8c-4570-8861-979d03f28774"
        alive:
          type: boolean
          description: whether or not the node is alive (registered a periodic alive timestamp)
          example: true
        timestamp:
          type: number
          format: long
          description: last registered alive timestamp
          example: 1549283768918
    ClusterNodes:
      type: object
      required:
        - uuid
        - nodes
      properties:
        uuid:
          type: string
          description: unique identifier of the node responding to the request
          example: "4cbefc2b-689d-424d-8e05-f0abc1a3a0b9"
        nodes:
          type: array
          description: the list of alive nodes
          items:
            $ref: '#/components/schemas/ClusterNode'
          example:
            - { 'uuid': '4cbefc2b-689d-424d-8e05-f0abc1a3a0b9', 'alive': true, 'timestamp': 1549283761912 }
            - { 'uuid': 'ec87c7bc-aa5d-4028-91a4-7856fcdec25b', 'alive': true, 'timestamp': 1549283763934 }
            - { 'uuid': '291956da-6f1e-4222-a9c9-c3b5c588622a', 'alive': true, 'timestamp': 1549283764956 }
    NodeDtLoadingStatus:
      type: object
      required:
        - index
      properties:
        uuid:
          type: string
          description: unique identifier of the cluster node
          example: "535096c7-5e8c-4570-8861-979d03f28774"
        index:
          type: string
          description: name of the decision table index
          example: index_getjenny_english_usecase0
        timestamp:
          type: number
          format: long
          description: update decisiontable timestamp
          example: 1549283768918
    NodeLoadingAllDtStatus:
      type: object
      required:
        - totalIndexes
        - updatedIndexes
        - indexes
      properties:
        totalIndexes:
          type: number
          format: long
          description: total number of decision tables
          example: 102
        updatedIndexes:
          type: number
          format: long
          description: total number of up to date decision tables on the node
          example: 101
        indexes:
          type: object
          description: map of nodes with the update status, true means up to date
          example: {"index_getjenny_english_0": true, "index_getjenny_english_1": true, "index_getjenny_english_2": false}
    ClusterLoadingDtStatusIndex:
      type: object
      required:
        - index
        - totalAliveNodes
        - upToDateNodes
        - updateCompleted
        - timestamp
      properties:
        index:
          type: string
          description: index name
          example: index_getjenny_english_usecase9
        totalAliveNodes:
          type: number
          format: long
          description: total number of alive nodes of the starchat cluster
          example: 3
        upToDateNodes:
          type: number
          format: long
          description: total number of starchat's cluster nodes with the latest version of the index
          example: 3
        updateCompleted:
          type: boolean
          description: true if all the alive nodes have the latest version of the decisiontable
          example: true
        timestamp:
          type: number
          format: long
          description: update decisiontable timestamp
          example: 1549283768918
    SpellcheckTermsRequest:
      required:
        - text
      type: object
      properties:
        text:
          type: string
          description: the text to be spellchecked
          example: "is this text misplelled?"
        prefixLength:
          type: number
          format: integer
          default: 3
          description: >-
            the number of minimal prefix characters that must match in order be a candidate suggestion
        minDocFreq:
          type: number
          format: integer
          default: 1
          description: >-
            the minimal occurrence in knowledgebase corpus of each suggested token
        maxEdit:
          type: number
          format: integer
          default: 2
          description: >-
            the max edit distance between the suggested token and the original token
    SpellcheckTokenSuggestions:
      type: object
      required:
        - score
        - freq
        - text
      properties:
        score:
          type: number
          format: double
          description: the candidate term score
          example: 0.800000011920929
        freq:
          type: number
          format: integer
          description: the occurrence of candidate term
          example: 1284,
        text:
          type: string
          description: the candidate term
          example: hello
    SpellcheckToken:
      type: object
      required:
        - text
        - offset
        - length
        - options
      properties:
        text:
          type: string
          description: the original token in text
          example: hellp
        offset:
          type: number
          format: integer
          description: the token offset
          example: 0
        length:
          type: number
          format: integer
          description: the potentially mispelled word
          example: 5
        options:
          type: array
          items:
            $ref: '#/components/schemas/SpellcheckTokenSuggestions'
    SpellcheckTermsResponse:
      type: object
      required:
        - tokens
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/SpellcheckToken'
    LanguageGuesserRequestIn:
      type: object
      required:
        - inputText
      properties:
        inputText:
          type: string
          description: the text to for which we need to guess the language
          example: guess the language of this sentence
    LanguageGuesserInformations:
      type: object
      description: a map with the language
      required:
        - supportedLanguages
      properties:
        supportedLanguages:
          type: object
          required:
            - supported_languages
          properties:
            supported_languages:
              type: object
              required:
                - languages
              properties:
                languages:
                  type: object
                  description: the result dictionary, the key is language ISO 639-1 code
                  additionalProperties:
                    type: boolean
                    description: whether the language is supported or not
                  example: {'en': true}
    LanguageGuesserRequestOut:
      type: object
      required:
        - language
        - score
        - confidence
        - enoughText
      properties:
        language:
          type: string
          description: the language guessed
          example: en
        score:
          type: number
          format: double
          description: a score for the guess confidence
          example: 0.571426689624786
        confidence:
          type: string
          description: the confidence about guess -> LOW, MEDIUM, HIGH
          example: MEDIUM
        enoughText:
          type: boolean
          description: whether the model had enough text for the guess
          example: false
    TokenizerQueryRequest:
      type: object
      required:
        - tokenizer
        - text
      properties:
        tokenizer:
          type: string
          description: the tokenizer name
          example: base
        text:
          type: string
          description: the text to tokenize
          example: good morning, please tokenize this text
    TokenizerResponseItem:
      type: object
      required:
        - startOffset
        - position
        - endOffset
        - token
        - tokenType
      properties:
        startOffset:
          type: number
          format: int
          description: the token start position in the original text
          example: 0
        position:
          type: number
          format: int
          description: the token index in the original text
          example: 0
        endOffset:
          type: number
          format: int
          description: the token end position in the original text
          example: 4
        token:
          type: string
          description: the token
          example: good
        tokenType:
          type: string
          description: type of token, it can be word, num
          example: word
    TokenizerResponse:
      type: object
      required:
        - tokens
      properties:
        tokens:
          type: array
          description: a list of tokenizaion items
          items:
            $ref: '#/components/schemas/TokenizerResponseItem'
    TokenizersSet:
      type: object
      additionalProperties:
        type: string
        description: tokenizer description, the key is the tokenizer name
        example: "2 words shingles"
      example: {
        "shingles2": "2-grams",
        "space_punctuation": "lowercase",
        "shingles2_10": "from 2 to 10 n-grams",
        "base": "lowercase",
        "base_stem": "lowercase + stemming",
        "shingles3": "3-grams",
        "raw": "lowercase",
        "stop": "lowercase + stopwords elimination",
        "shingles4": "4-grams",
        "stop_stem": "lowercase + stopwords elimination + stemming"
      }
    Term:
      type: object
      required:
        - term
      properties:
        term:
          type: string
          description: term textual form
          example: "hello"
        synonyms:
          type: object
          description: "a set of synonyms with score"
          additionalProperies:
            type: number
            format: double
            description: "similar term, the key is the synonym"
          example: {'hi': 0.6}
        antonyms:
          type: object
          description: a set of antonynonyms with score
          additionalProperies:
            type: number
            format: double
            description: "countrary term, the key is the antonynonym"
          example: {'goodbye': 0.3}
        tags:
          type: string
          description: a set of tags associated to the term
          example: "tag1 tag2"
        features:
          type: object
          description: a set of features associated to the term
          additionalProperies:
            type: string
            description: feature value
            example: 'name'
          example: {'POS': 'name'}
        frequencyBase:
          type: number
          format: double
          description: occurrence of the term on a corpus
          example: 410301.0
        frequencyStem:
          type: number
          format: double
          description: "occurrence of the term's stemmed form on a corpus"
          example: 601301.0
        vector:
          type: array
          description: the vectorial representation of the term e.g. word2vec
          items:
            type: number
            format: double
          example: [0.0, -1.0,  2.0, 1.2, 3.0]
        score:
          type: number
          description: the term score (used to rank terms in search results)
          format: double
          example: 0.9
    SearchTerm:
      type: object
      properties:
        term:
          type: string
          description: term textual form
          example: "hello"
        synonyms:
          type: object
          description: a set of synonyms with score
          additionalProperies:
            type: number
            format: double
            description: "similar term, the key is the synonym"
          example: {'hi': 0.6}
        antonyms:
          type: object
          description: a set of antonynonyms with score
          additionalProperies:
            type: number
            format: double
            description: "countrary term, the key is the antonynonym"
          example: {'goodbye': 0.3}
        tags:
          type: string
          description: a set of tags associated to the term
          example: "tag1 tag2"
        features:
          type: object
          description: a set of features associated to the term
          additionalProperies:
            type: string
            description: feature value
            example: 'name'
          example: {'POS': 'name'}
        frequencyBase:
          type: number
          format: double
          description: occurrence of the term on a corpus
          example: 410301.0
        frequencyStem:
          type: number
          format: double
          description: "occurrence of the term's stemmed form on a corpus"
          example: 601301.0
        vector:
          type: array
          description: the vectorial representation of the term e.g. word2vec
          items:
            type: double
          example: [0.0, -1.0,  2.0, 1.2, 3.0]
        score:
          type: number
          description: the term score (used to rank terms in search results)
          format: double
          example: 0.9
    Terms:
      type: object
      properties:
        terms:
          type: array
          items:
            $ref: '#/components/schemas/Term'
    TermsResults:
      type: object
      required:
        - total
        - maxScore
        - hits
      properties:
        total:
          type: number
          format: integer
          description: the number of terms returned
          example: 1
        maxScore:
          type: number
          format: float
          description: the max score of the returned terms
          example: 0.88
        hits:
          $ref: '#/components/schemas/Terms'
    TextTerms:
      type: object
      required:
        - text
        - textTermsN
        - termsFoundN
        - terms
      properties:
        text:
          type: string
          description: the original text
          example: "this is a sample sentence"
        textTermsN:
          type: number
          format: integer
          description: the number of terms in the sentence
          example:  5
        termsFoundN:
          type: number
          format: integer
          description: number of terms found in the terms table
          example: 5
        terms:
          $ref: '#/components/schemas/Terms'
    TermsDistanceRes:
      type: object
      required:
        - term1
        - term2
        - vector1
        - vector2
        - cosDistance
        - eucDistance
      properties:
        term1:
          type: string
          description:  the first term
          example: 'hello'
        term2:
          type: string
          description:  the second term
          example: 'hi'
        vector1:
          type: array
          description: vectorial representation of the first term
          items:
            type: number
            format: double
          example: [0.0, -1.0,  2.0, 1.2, 3.0]
        vector2:
          type: array
          description: vectorial representation of the second term
          items:
            type: number
            format: double
          example: [-1.0, -2.0,  -0.3, 1.2, 3.0]
        cosDistance:
          type: number
          format: double
          description: cosine distance between terms
          example: 0.8
        eucDistance:
          type: number
          format: double
          description: euclidean distance between terms
          example: 3.1
    ListTermsDistanceRes:
      type: array
      description: list of terms distance
      items:
        $ref: '#/components/schemas/TermsDistanceRes'
    DocsIds:
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          example: ['id1', 'id2']
    TermsExtractionRequest:
      required:
        - text
      properties:
        text:
          type: string
          description: a text from which extract keywords
          example: "good morning, may I ask you a question?"
        tokenizer:
          type: string
          description: "the tokenizer to use (see TokenizersSet data structure for the available tokenizers)"
          example: space_punctuation
          default: space_punctuation
        commonOrSpecificSearchPrior:
          type: string
          description: extract prior statistics from the common tables or index specific tables
          enum:
            - COMMON
            - IDXSPECIFIC
          example: IDXSPECIFIC
          default: COMMON
        commonOrSpecificSearchObserved:
          type: string
          description: extract observed statistics from the common tables or index specific tables
          enum:
            - COMMON
            - IDXSPECIFIC
          example: IDXSPECIFIC
          default: COMMON
        observedDataSource:
          type: string
          description: extract observed statistics from knowledge base or the conversation log table
          enum:
            - KNOWLEDGEBASE
            - CONV_LOGS
          example: CONV_LOGS
          default: KNOWLEDGEBASE
        fieldsPrior:
          type: string
          description: fields to be used for the prior statistics
          enum:
            - question
            - answer
            - all
          example: question
          default: all
        fieldsObserved:
          type: string
          description: fields to be used for the observed statistics
          enum:
            - question
            - answer
            - all
          example: question
          default: all
        minWordsPerSentence:
          type: number
          format: integer
          description: the minimum amount of words on the sentence
          example: 10
          default: 10
        pruneTermsThreshold:
          type: number
          format: integer
          description: a threshold on the number of terms for trigger pruning
          example: 100000
          default: 100000
        misspellMaxOccurrence:
          type: number
          format: integer
          description: given a big enough sample, min freq beyond what we consider the token a misspell
          example: 5
          default: 5
        activePotentialDecay:
          type: number
          format: integer
          description: decay value for the active potential
          example: 10
          default: 10
        activePotential:
          type: boolean
          description: enable/disable the calculation of active potential
          example: true
          default: true
        minSentenceInfoBit:
          type: number
          format: integer
          description: the minimum amount of information for the sentence in bits
          example: 16
          default: 16
        minKeywordInfo:
          type: number
          format: integer
          description: the minimum amount of information per keywords in bits
          example: 8
          default: 8
        totalInfo:
          type: boolean
          description: use the total information
          example: false
          default: false
    SynExtractionRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: a text from which extract keywords
          example: "good morning, may I ask you a question?"
        tokenizer:
          type: string
          description: "the tokenizer to use (see TokenizersSet data structure for the available tokenizers)"
          example: "space_punctuation"
          default: "base"
        sentencesThreshold:
          type: number
          format: double
          description: discard candidates if the sentence distance is below the threshold
          default: 0.0
          example: 0.3
        synonymsThreshold:
          type: number
          format: double
          description: discard candidates if the terms distance is below the threshold
          default: 0.0
          example: 0.3
        distanceFunction:
          type: string
          enum:
            - EMDCOSINE
            - SUMCOSINE
            - MEANCOSINE
          default: EMDCOSINE
          example: SUMCOSINE
          description: the function to measure distance between sentences
        commonOrSpecificSearchPrior:
          type: string
          description: extract prior statistics from the common tables or index specific tables
          enum:
            - COMMON
            - IDXSPECIFIC
          example: IDXSPECIFIC
          default: COMMON
        commonOrSpecificSearchObserved:
          type: string
          description: extract observed statistics from the common tables or index specific tables
          enum:
            - COMMON
            - IDXSPECIFIC
          example: IDXSPECIFIC
          default: COMMON
        commonOrSpecificSearchTerms:
          type: string
          description: extract terms from the common tables or index specific tables
          enum:
            - COMMON
            - IDXSPECIFIC
          example: IDXSPECIFIC
          default: COMMON
        observedDataSource:
          type: string
          description: extract observed statistics from knowledge base or the conversation log table
          enum:
            - KNOWLEDGEBASE
            - CONV_LOGS
          example: CONV_LOGS
          default: KNOWLEDGEBASE
        fieldsPrior:
          type: string
          description: fields to be used for the prior statistics
          enum:
            - question
            - answer
            - all
          example: question
          default: all
        fieldsObserved:
          type: string
          description: fields to be used for the observed statistics
          enum:
            - question
            - answer
            - all
          example: question
          default: all
        minWordsPerSentence:
          type: number
          format: integer
          description: the minimum amount of words on the sentence
          example: 10
          default: 10
        pruneTermsThreshold:
          type: number
          format: integer
          description: a threshold on the number of terms for trigger pruning
          example: 100000
          default: 100000
        misspellMaxOccurrence:
          type: number
          format: integer
          description: given a big enough sample, min freq beyond what we consider the token a misspell
          example: 5
          default: 5
        activePotentialDecay:
          type: number
          format: integer
          description: decay value for the active potential
          example: 10
          default: 10
        activePotential:
          type: boolean
          description: enable/disable the calculation of active potential
          example: true
          default: true
        minSentenceInfoBit:
          type: number
          format: integer
          description: the minimum amount of information for the sentence in bits
          example: 16
          default: 16
        minKeywordInfo:
          type: number
          format: integer
          description: the minimum amount of information per keywords in bits
          example: 8
          default: 8
        totalInfo:
          type: boolean
          description: use the total information
          example: false
          default: false
    TokenFrequencyItem:
      type: object
      properties:
        token:
          type: string
          description: term
          example: hello
        priorFrequency:
          type: number
          format: double
          description: occurrence in the prior table
          example: 1999291
        observedFrequency:
          type: number
          format: double
          description: occurrence in the observed table
          example: 3391293
    TokenFrequency:
      type: object
      required:
        - tokensFreq
        - priorTotalTerms
        - observedTotalTerms
      properties:
        tokensFreq:
          type: array
          items:
            $ref: '#/components/schemas/TokenFrequencyItem'
        priorTotalTerms:
          type: number
          format: long
          description: total terms in prior table
          example: 193942850
        observedTotalTerms:
          type: number
          format: long
          description: total terms in prior table
          example: 1234566731
    SynonymItem:
      type: object
      required:
        - synonym
        - synonymScore
        - termSimilarityScore
        - textDistanceWithSynonym
      properties:
        synonym:
          type:  string
          example: hello
          description: String the synonym text
        synonymScore:
          type: number
          format: double
          example: 0.8
          description: >-
            the similarity score between this token and the original, it can be different from the other score this field should be used to select the most similar term
        termSimilarityScore:
          type: number
          format: double
          example: 0.985895039899644
          description: cosine distance between the synonym and the original term
        textDistanceWithSynonym:
          type: number
          format: double
          example: 0.985895039899644
          description: the cosine distance between the vectorial sentence representation with and without the synonym
    SynonymExtractionItem:
      type: object
      required:
        - token
        - isKeywordToken
        - keywordExtractionScore
        - synonymItem
      properties:
        token:
          description: a token element with position and offset annotation
          $ref: '#/components/schemas/TokenizerResponseItem'
        isKeywordToken:
          type: boolean
          description: if the term was selected as relevant by Manaus or keyword extraction algorithm
          example: true
          default: false
        keywordExtractionScore:
          type: number
          format: double
          description: Manaus or keyword extraction algorithm score, only relevant if manausToken is true
          example: 0.6
          default: 0.0
        synonymItem:
          description: list of suggested synonyms
          $ref: '#/components/schemas/SynonymItem'
    TermCountFields:
      type: string
      description: fields to be used for the prior statistics
      enum:
        - question
        - answer
        - all
      example: question
      default: all
    TermCount:
      type: object
      required:
        - numDocs
        - count
      properties:
        numDocs:
          type: number
          format: long
          description: number of documents containing the term
          example: 10983
        count:
          type: number
          format: long
          description: total term occurrence
          example: 100911
    DictSize:
      type: object
      properties:
        numDocs:
          type: number
          format: long
          description: total number of documents
          example: 100331
        answer:
          type: number
          format: long
          description: total terms in answer field
          example: 313103311
        question:
          type: number
          format: long
          description: total terms in question field
          example: 12313311
        total:
          type: number
          format: long
          description: total terms in all field
          example: 325416622
    TotalTerms:
      properties:
        numDocs:
          type: number
          format: long
          description: total number of documents
          example: 200331
        answer:
          type: number
          format: long
          description: total terms in answer field
          example: 420213311
        question:
          type: number
          format: long
          description: total terms in question field
          example: 25313311
    Doctypes:
      type: string
      description: >-
        document type:
          * `NORMAL` -> can be returned to the user as response
          * `CANNED` -> canned document, indexed but retrieved only under particular circumstances
          * `HIDDEN` -> hidden document, these are indexed but must not be retrieved, use this type for data used just to improve statistic for data retrieval
          * `DECISIONTABLE` -> does not contains conversation data, used to redirect the conversation to any state of the decision tree
      example: NORMAL
      enum:
        - NORMAL
        - CANNED
        - HIDDEN
        - DECISIONTABLE
    Escalated:
      type: string
      description: >-
        an enumerated value which indicates whether the conversation was escalated to a human, those conversations
        without a document containing the transferred value are assumed completed entirely by StarChat.
        Values:
          * `TRANSFERRED` -> can be returned to the user as response
          * `UNSPECIFIED` -> usually in the middle of a conversation this value is not set, it is known at the end of the conversation or when the user requests to escalate
      example: TRANSFERRED
      enum:
        - TRANSFERRED
        - UNSPECIFIED
    Answered:
      type: string
      description: >-
        an enumerated value which indicates whether or not StarChat provided an answer for the question.
        Values:
          * `ANSWERED` -> the answer was provided
          * `UNANSWERED` -> Question for which no answer was provided ii.e. StarChat returns empty list or 404 or the agent didn’t answer
          * `UNSPECIFIED` -> when the information is not applicable
      example: answered
      enum:
        - ANSWERED
        - UNANSWERED
        - UNSPECIFIED
    Triggered:
      type: string
      description: >-
        an enumerated value which indicates whether the state was triggered via actions (e.g. via buttons, or input validation).
        Values:
          * `BUTTON` -> the answer was triggered by a button
          * `ACTION` -> the answer was triggered by an action
          * `UNSPECIFIED` -> usually this information is not applicable except in the other two cases mentioned before.
      example: button
      enum:
        - BUTTON
        - ACTION
        - UNSPECIFIED
    Followup:
      type: string
      description: >-
        an enumerated value which depends on the time of day and status of customer service during which happened a followup
        values:
          * `FOLLOWUP` -> follow up
          * `FOLLOWUP_BY_TIME` -> follow up dependant on the time of the day
          * `UNSPECIFIED` -> not applicable
      example: followupByTime
      enum:
        - FOLLOWUP
        - FOLLOWUP_BY_TIME
        - UNSPECIFIED
    Agent:
      type: string
      description: >-
        tell if the answer was provided by a human agent or by chatbot (StarChat), this is an enumerated field with the following values
        Values:
          * `HUMAN_REPLY` -> Answer provided by an agent, must be used when the conversation has been escalated
                  and the platform (a human is carrying on the conversation) and is not possible to discriminate
                  between HUMAN_PICKED and HUMAN_REPLY
          * `HUMAN_PICKED` -> When an agent chooses and answer suggestion provided by smartLayer
          * `STARCHAT` -> the answer was provided by StarChat
          * `CONNECTOR` -> the answer was provided by the connector, usually because starchat doesn't responds
          * `UNSPECIFIED` -> when the information is unset/not applicable
      example: HUMAN_REPLY
      enum:
        - HUMAN_REPLY
        - HUMAN_PICKED
        - STARCHAT
        - UNSPECIFIED
    QAAggregationsTypes:
      type: string
      description: >-
        type of statistical aggregated data generated from a QA data type. Values:
          * `avgFeedbackConvScore` -> the average score for the conversations (transferred and non-transferred)
          * `avgFeedbackAnswerScore` -> the average score for all the Answers (transferred and non-transferred)
          * `avgAlgorithmConvScore` -> the average score for the conversations (transferred and non-transferred), the scores are provided by an algorithm
          * `avgAlgorithmAnswerScore` -> the average score for all the Answers (transferred and non-transferred), the scores are provided by an algorithm
          * `scoreHistogram` -> the distribution of scores, an histogram (transferred and non-transferred)
          * `scoreHistogramNotTransferred` -> the distribution of scores for the non-transferred conversations, an histogram
          * `scoreHistogramTransferred` -> the distribution of scores for the transferred conversations, an histogram
          * `conversationsHistogram` -> time range histogram of the number of conversations on a time range (transferred and non-transferred)
          * `conversationsNotTransferredHistogram` -> time range histogram of the number of conversations on a time range (non-transferred only)
          * `conversationsTransferredHistogram` -> time range histogram of the number of conversations on a time range (transferred only)
          * `qaPairHistogram` -> time range histogram of the Q/A documents (only starchat agent, answered + unanswered)
          * `qaPairAnsweredHistogram` -> time range histogram of the number of answered Q/A documents (only starchat agent)
          * `qaPairUnansweredHistogram` -> time range histogram of the number of unanswered Q/A documents (only starchat agent)
          * `qaMatchedStatesHistogram` -> histogram of matched states
          * `qaMatchedStatesWithScoreHistogram` -> histogram of matched states with score
          * `avgFeedbackNotTransferredConvScoreOverTime` -> average score for the conversations (non-transferred only) on each time interval
          * `avgFeedbackTransferredConvScoreOverTime` -> average score for the conversations (transferred only) on each time interval
          * `avgAlgorithmNotTransferredConvScoreOverTime` -> average score for the conversations (non-transferred only) on each time interval, the scores are provided by an algorithm
          * `avgAlgorithmTransferredConvScoreOverTime` -> average score for the conversations (transferred only) on each time interval, the scores are provided by an algorithm
          * `avgFeedbackConvScoreOverTime` -> average score for the conversations (transferred and non-transferred) on each time interval
          * `avgAlgorithmAnswerScoreOverTime` -> average score for the answers (transferred and transferred) on each time interval
          * `avgFeedbackAnswerScoreOverTime` -> average score for the answers (transferred and non-transferred) on each time interval, the scores are provided by an algorithm
          * `avgAlgorithmConvScoreOverTime` -> average score for the answers (transferred and transferred) on each time interval, the scores are provided by an algorithm
      example: avgFeedbackConvScore
      enum:
        - avgFeedbackConvScore
        - avgFeedbackAnswerScore
        - avgAlgorithmConvScore
        - avgAlgorithmAnswerScore
        - scoreHistogram
        - scoreHistogramNotTransferred
        - scoreHistogramTransferred
        - conversationsHistogram
        - conversationsNotTransferredHistogram
        - conversationsTransferredHistogram
        - qaPairHistogram
        - qaPairAnsweredHistogram
        - qaPairUnansweredHistogram
        - qaMatchedStatesHistogram
        - avgFeedbackNotTransferredConvScoreOverTime
        - avgFeedbackTransferredConvScoreOverTime
        - avgAlgorithmNotTransferredConvScoreOverTime
        - avgAlgorithmTransferredConvScoreOverTime
        - avgFeedbackNotTransferredAnswerScoreOverTime
        - avgFeedbackTransferredAnswerScoreOverTime
        - avgAlgorithmNotTransferredAnswerScoreOverTime
        - avgAlgorithmTransferredAnswerScoreOverTime
        - avgFeedbackConvScoreOverTime
        - avgAlgorithmAnswerScoreOverTime
        - avgFeedbackAnswerScoreOverTime
        - avgAlgorithmConvScoreOverTime
    TimeInterval:
      type: string
      description: >-
        a time interval description. It can be specified using a number followed by a time unit description <n><unit>
        for instance : 1m, y, 1h, 50s (multiple not supported for weeks, months, quarters and year).
        Valid time units are:
          * `ms`-> milliseconds, multiple supported
          * `m` -> minutes, multiple supported
          * `h` -> hours, multiple supported
          * `d` -> days, multiple supported
          * `w` -> weeks, multiple not supported, supported value 1w
          * `M` -> months, multiple not supported, supported value 1M
          * `q` -> quarters, multiple not supported, supported value 1q
          * `y` -> years, multiple not supported, supported value 1y
      example: 1M
    CountOverTimeHistogramItem:
      type: object
      required:
        - key
        - keyAsString
        - docCount
      properties:
        key:
          type: number
          format: long
          description: a timestamp in milliseconds (bucket)
          example: 1550534500000
        keyAsString:
          type: string
          description: >-
            string representation of the bucket, format is 'YYYY-MM-dd : HH:mm:ss'
          example: "2019-02-19 : 01:00:00"
        docCount:
          type: number
          format: long
          description: how many conversations falls in the bucket
          example: 113
    AvgScoresHistogramItem:
      type: object
      required:
        - key
        - keyAsString
        - docCount
        - avgScore
      properties:
        key:
          type: number
          format: long
          description: a timestamp in milliseconds (bucket)
          example: 1550584800000
        keyAsString:
          type: string
          description: >-
            string representation of the bucket, format is 'YYYY-MM-dd : HH:mm:ss'
          example: "2019-02-19 : 14:00:00"
        docCount:
          type: number
          format: long
          description: how many conversations falls in the bucket
          example: 7
        avgScore:
          type: number
          format: double
          description: the average score in bucket
          example: 12.0
    ScoreHistogramItem:
      type: object
      required:
        - key
        - docCount
      properties:
        key:
          type: number
          format: double
          description: a score value (bucket)
          example: 0.0
        docCount:
          type: number
          format: long
          description: how many score falls in the bucket
          example: 13214
    LabelCountHistogramItem:
      type: object
      required:
        - key
        - docCount
      properties:
        key:
          type: string
          description: a label (bucket)
          example: "keyword1"
        docCount:
          type: number
          format: long
          description: how many score falls in the bucket
          example: 13214
    QAAggregatedAnalytics:
      type: object
      required:
        - totalDocuments
        - totalConversations
      properties:
        totalDocuments:
          type: number
          format: long
          description: the number of document selected by the query
          example: 135884
        totalConversations:
          type: number
          format: long
          description: the number of conversations selected by the query
          example: 19716
        avgFeedbackConvScore:
          type: number
          description: the average conversations score
          format: double
          example: 3.0
        avgAlgorithmConvScore:
          type: number
          description: the average conversations score (algorithms score)
          format: double
          example: 4.0
        avgAlgorithmAnswerScore:
          type: number
          description: the average answers score
          format: double
          example: 3.4
        avgFeedbackAnswerScore:
          type: number
          description: the average answers score (algorithms score)
          format: double
          example: 3.7
        scoreHistograms:
          type: object
          description: histogram of scores
          additionalProperies:
            type: array
            items:
              $ref: '#/components/schemas/ScoreHistogramItem'
          example: {"scoreHistogram": [{"key": 0.0, "docCount": 13213}, {"key": 1.0, "docCount": 213}, {"key": 4.0, "docCount": 1013}]}
        labelCountHistograms:
          type: object
          description: count of labels
          additionalProperies:
            type: array
            items:
              $ref: '#/components/schemas/LabelCountHistogramItem'
          example: {"scoreHistogram": [{"key": "keyword1", "docCount": 13213}, {"key": "keyword2", "docCount": 213}, {"key": "keyword3", "docCount": 1013}]}
        countOverTimeHistograms:
          type: object
          description: histogram of conversations (conversation counts)
          additionalProperies:
            type: array
            items:
              $ref: '#/components/schemas/CountOverTimeHistogramItem'
          example: {"conversationsHistogram": [{"key": 1550534400000, "keyAsString": "2019-02-19 : 00:00:00", "docCount": 1213},
                                               {"key": 1550534500000, "keyAsString": "2019-02-19 : 01:00:00", "docCount": 113},
                                               {"key": 1550534600000, "keyAsString": "2019-02-19 : 02:00:00", "docCount": 1},
                                               {"key": 1550534700000, "keyAsString": "2019-02-19 : 03:00:00", "docCount": 5331}]}
        scoresOverTime:
          type: object
          description: distribution of scores over time
          additionalProperies:
            type: array
            items:
              $ref: '#/components/schemas/AvgScoresHistogramItem'
          example: {"avgFeedbackConvScoreOverTime": [{"keyAsString": "2019-02-19 : 08:00:00", "key": 1550563200000, "docCount": 1, "avgScore": 0.0},
                                                     {"keyAsString": "2019-02-19 : 12:00:00", "key": 1550577600000, "docCount": 110168, "avgScore": 1.0},
                                                     {"keyAsString": "2019-02-19 : 13:00:00", "key": 1550581200000, "docCount": 25705, "avgScore": 5.83544057576347E-4},
                                                     {"keyAsString": "2019-02-19 : 14:00:00", "key": 1550584800000, "docCount": 7, "avgScore": 12.0}]}
    QAAggregatedAnalyticsRequest:
      type: object
      properties:
        interval:
          $ref: '#/components/schemas/TimeInterval'
        minDocInBuckets:
          type: number
          format: long
          description: >-
            the min number of documents in a bucket, when greater than zero the empty buckets will not be returned.
            When zero, the empty buckets will be returned but only those between the first non empty bucket and the last.
          example: 0
          default: 1
        timestampGte:
          type: number
          format: long
          description: filter by records insertion timestamp, if not specified no lower bound
          example: 1549283700000
        timestampLte:
          type: number
          format: long
          description: filter by records insertion timestamp, if not specified no upper bound
          example: 1549283900000
        aggregations:
          type: array
          description: list of aggregation which are to be returned, the returned object will use the aggregation type as a key in the returned object
          items:
            $ref: '#/components/schemas/QAAggregationsTypes'
          example: ['totalConversations', 'avgFeedbackConvScore', 'scoreHistogram', 'avgAlgorithmConvScoreOverTime']
          default: []
        timeZone:
          type: string
          description: an ISO 8601 UTC offset, used for the time based histograms in addition to the EPOC timestamp in millis.
          example: "-08:00"
          default: "+00:00"
    QADocumentCore:
      type: object
      properties:
        question:
          type: string
          description: usually what the user of the chat says
          example: I forgot my password
        questionNegative:
          type: array
          description: list of sentences different to the main question
          items:
            type: string
          example: I remember my password
        questionScoredTerms:
          type: array
          description: question's terms list with score (tuples)
          items:
            type: array
            example: ["password", 0.2121]
        answer:
          type: string
          description: usually what the operator of the chat says
          example: I can reset the password for you
        answerScoredTerms:
          type: array
          description: answer's terms list with score (tuples)
          items:
            type: array
            example: ["reset", 0.2121]
        verified:
          type: boolean
          description: whether the conversation was verified by an operator or not
          default: false
          example: true
        topics:
          type: string
          description: list of topics
          example: "password reset"
        done:
          type: boolean
          description: the conversation has marked as done, this field is expected to set for each item of the conversation
          example: true
          default: false
    QADocumentAnnotations:
      type: object
      properties:
        dclass:
          type: string
          description: document classes
          example: "group0 group1"
        doctype:
          type: string
          default: NORMAL
          example: HIDDEN
          $ref: '#/components/schemas/Doctypes'
        state:
          type: string
          description: eventual link to any of the state machine states
          example: "forgot_password"
        agent:
          type: string
          default: STARCHAT
          example: HUMAN_PICKED
          $ref: '#/components/schemas/Agent'
        escalated:
          type: string
          default: UNSPECIFIED
          example: TRANSFERRED
          $ref: '#/components/schemas/Escalated'
        answered:
          type: string
          default: ANSWERED
          example: UNANSWERED
          $ref: '#/components/schemas/Answered'
        triggered:
          type: string
          default: UNSPECIFIED
          example: BUTTON
          $ref: '#/components/schemas/Triggered'
        followup:
          type: string
          default: UNSPECIFIED
          example: FOLLOWUP
          $ref: '#/components/schemas/Followup'
        feedbackConv:
          type: string
          description: A feedback provided by the user to the conversation
          example: Thanks I solved my problem,  you were very helpful
        feedbackConvScore:
          type: number
          format: double
          description: >-
            a field to store the score provided by the user to the conversation.
            Since the default value is 0.0 (no feedback, to indicate extremely negative feedback a value greater then
             0.0 must be chosen)
          example: 4.0
          default: 0.0
        algorithmConvScore:
          type: number
          format: double
          description: >-
            a field to store the score calculated by an algorithm related to the conversation i.e. a sentiment
            analysis tool (for future use).
            Since the default value is 0.0 (no feedback, to indicate extremely negative feedback a value greater then
              0.0 must be chosen)
          example: 2.0
          default: 0.0
        feedbackAnswerScore:
          type: number
          format: double
          description: >-
            a field to store the score provided by the user for the answer.
            Since the default value is 0.0 (no feedback, to indicate extremely negative feedback a value greater then
              0.0 must be chosen)
          example: 4.0
          default: 0.0
        algorithmAnswerScore:
          type: number
          format: double
          description: >-
            a field to store the score calculated by an algorithm related to the answer i.e. a sentiment
            analysis tool (for future use).
            Since the default value is 0.0 (no feedback, to indicate extremely negative feedback a value greater then
              0.0 must be chosen)
          example: 2.0
          default: 0.0
        responseScore:
          type: number
          format: double
          description: score of the response e.g. Starchat response score
          example: 0.3
        start:
          type: boolean
          description: event determined when a start state is loaded
          example: true
          default: false
    QADocumentAnnotationsSearch:
      type: object
      properties:
        doctype:
          type: array
          description: search for a specific doctypes
          items:
            $ref: '#/components/schemas/Doctypes'
          example: [ "NORMAL" ]
        dclass:
          type: string
          description: search for a document class
          example: "group0"
        state:
          type: string
          description: search for documents associated to a state
          example: "check_policy_expiration"
        agent:
          type: array
          descripton: values to match (search documents with at least one value)
          items:
            $ref: '#/components/schemas/Agent'
          example: ["HUMAN_PICKED"]
        escalated:
          type: array
          description: values to match (search documents with at least one value)
          items:
            $ref: '#/components/schemas/Escalated'
          example: [ "TRANSFERRED" ]
        answered:
          type: array
          description: values to match (search documents with at least one value)
          items:
            $ref: '#/components/schemas/Answered'
          example: [ "ANSWERED" ]
        triggered:
          type: array
          description: values to match (search documents with at least one value)
          items:
            $ref: '#/components/schemas/Triggered'
          example: [ "BUTTON" ]
        followup:
          type: array
          description: values to match (search documents with at least one value)
          items:
          $ref: '#/components/schemas/Followup'
          example: [ "FOLLOWUP" ]
        feedbackConv:
          type: string
          description: A feedback provided by the user to the conversation
          example: Thanks I solved my problem, you were very helpful
        feedbackScoreConvGte:
          type: number
          format: double
          description: >-
            min score value, if not specified -> no lower bound (conversation).
          example: 1.0
        feedbackScoreConvLte:
          type: number
          format: double
          description: max score value, if not specified -> no upper bound (conversation)
          example: 5.0
        algorithmScoreConvGte:
          type: number
          format: double
          description: >-
            min score value, if not specified -> no lower bound (conversation)
          example: 4.0
        algorithmScoreConvLte:
          type: number
          format: double
          description: max score value, if not specified -> no upper bound (conversation)
          example: 5.0
        feedbackScoreAnswerGte:
          type: number
          format: double
          description: >-
            min score value, if not specified -> no lower bound (answer)
          example: 1.0
        feedbackScoreAnswerLte:
          type: number
          format: double
          description: >-
            max score value, if not specified -> no upper bound (answer)
          example: 5.0
        algorithmScoreAnswerGte:
          type: number
          format: double
          description: min score value, if not specified -> no lower bound (answer)
          example: 4.0
        algorithmScoreAnswerLte:
          type: number
          format: double
          description: >-
            max score value, if not specified -> no upper bound (answer)
          example: 5.0
        responseScoreGte:
          type: number
          format: double
          description: min StarChat score value, if not specified -> no lower bound (answer)
          example: 0.8
        responseScoreLte:
          type: number
          format: double
          description: >-
            max StarChat score value, if not specified -> no upper bound (answer)
          example: 0.9
        start:
          type: boolean
          description: event determined when a start state is loaded
          example: true
    QADocumentCoreSearch:
      type: object
      properties:
        question:
          type: string
          description: a text to be matched with the question field
          example: >-
            when should I renew my insurance?
        questionScoredTerms:
          type: string
          description: a string of terms matched with the question scored terms field
          example: "when renew insurance"
        answer:
          type: string
          description: a text to be matched with the answer field
          example: >-
            please give me your policy number, I will check when your policy expires.
        answerScoredTerms:
          type: string
          description: a string of terms matched with the answr scored terms field
          example: "policy number expires"
        verified:
          type: boolean
          description: search for verified/unverified documents
          example: true
        topics:
          type: string
          description: search for specific topics
          example: "policy renew"
        done:
          type: boolean
          description: the conversation has marked as done, this field is expected to set for each item of the conversation
          example: true
    QADocument:
      type: object
      required:
        - id
        - conversation
        - indexInConversation
      properties:
        id:
          type: string
          description: unique id of the document
          example: id123
        conversation:
          type: string
          description: ID of the conversation (multiple q&a may be inside a conversation)
          example: conv_id_1234
        indexInConversation:
          type: number
          format: integer
          description: the index of the document in the conversation flow (Start from 1, 0 is reserved)
          example: 10
        coreData:
          type: object
          $ref: '#/components/schemas/QADocumentCore'
        annotations:
          type: object
          $ref: '#/components/schemas/QADocumentAnnotations'
        status:
          type: number
          format: integer
          description: >-
            tell whether the document is locked for editing or not, useful for a GUI to avoid concurrent modifications, 0 means no operations pending
          example: 0
        timestamp:
          type: number
          format: long
          description: record insertion timestamp (if not provided on document creation is automatically calculated)
          example: 1549283768918
    QADocumentUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: array
          items:
            type: string
          example: ['id1', 'id2']
        conversation:
          type: string
          description: ID of the conversation (multiple q&a may be inside a conversation)
          example: conv_id_1234
        indexInConversation:
          type: number
          format: integer
          description: the index of the document in the conversation flow (Start from 1, 0 is reserved)
          example: 10
        coreData:
          type: object
          $ref: '#/components/schemas/QADocumentCore'
        annotations:
          type: object
          $ref: '#/components/schemas/QADocumentAnnotations'
        status:
          type: number
          format: integer
          description: >-
            tell whether the document is locked for editing or not, useful for a GUI to avoid concurrent modifications, 0 means no operations pending
          example: 0
        timestamp:
          type: number
          format: long
          description: record insertion timestamp
          example: 1549283768918
    QADocumentUpdateByQuery:
      type: object
      properties:
        id:
          type: array
          items:
            type: string
          example: ['id1', 'id2']
        conversation:
          type: string
          description: ID of the conversation (multiple q&a may be inside a conversation)
          example: conv_id_1234
        indexInConversation:
          type: number
          format: integer
          description: the index of the document in the conversation flow (Start from 1, 0 is reserved)
          example: 10
        coreData:
          type: object
          $ref: '#/components/schemas/QADocumentCore'
        annotations:
          type: object
          $ref: '#/components/schemas/QADocumentAnnotations'
        status:
          type: number
          format: integer
          description: >-
            tell whether the document is locked for editing or not, useful for a GUI to avoid concurrent modifications, 0 means no operations pending
          example: 0
        timestamp:
          type: number
          format: long
          description: record insertion timestamp
          example: 1549283768918
    UpdateQAByQueryReq:
      type: object
      required:
        - documentSearch
        - document
      properties:
        documentSearch:
          $ref: '#/components/schemas/QADocumentSearch'
        document:
          $ref: '#/components/schemas/QADocumentUpdateByQuery'
    SearchQADocument:
      type: object
      required:
        - score
        - document
      properties:
        score:
          type: number
          format: float
          description: search score
          example: 0.0
        document:
          $ref: '#/components/schemas/QADocument'
    Conversation:
      type: object
      required:
        - count
        - docs
      properties:
        count:
          type: number
          format: integer
          description: number of documents in the conversation
          default: 0
          example: 1
        docs:
          type: array
          items:
            $ref: '#/components/schemas/QADocument'
    Conversations:
      type: object
      required:
        - total
        - conversations
      properties:
        total:
          type: number
          format: integer
          description: number of conversations returned
          default: 0
          example: 1
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'
    SearchQADocumentsResults:
      type: object
      required:
        - totalHits
        - hitsCount
        - maxScore
        - hits
      properties:
        totalHits:
          type: number
          format: long
          description: the number of documents matching the query
          example: 101121
        hitsCount:
          type: number
          format: integer
          description: number of documents returned
          default: 0
          example: 10
        maxScore:
          type: number
          format: float
          example: 0.9
          default: 0.0
        hits:
          type: array
          items:
            $ref: '#/components/schemas/SearchQADocument'
    QADocumentSearch:
      type: object
      properties:
        from:
          type: number
          format: integer
          description: return results starting from the n-th entry
          example: 0
          default: 0
        size:
          type: number
          format: integer
          description: how many result are to be returned
          example: 10000
          default: 10
        minScore:
          type: number
          format: float
          description: a threshold which exclude the results with a too low score
          default: 0
        sortBy:
          type: object
          description: list of fields used to sort the search result
          additionalProperties:
            type: array
            description: if empty, SCORE will be used by default
            items:
              $ref: '#/components/schemas/QASearchSortBy'
            example:
              - TIMESTAMP
              - IDX_IN_CONVERSATION
        sortByConvIdIdx:
          type: boolean
          deprecated: true
          description: >-
            Deprecated since version 5.3, will be removed in StarChat 6: use sortBy instead
            whether to sort the documents by ConversationID and index in conversation or if sort by score.
            Note that the score is greater than 0 only for text queries, fields matching will have no
            contribution to scoring i.e. fields matching only queries will return 0 score for all the documents.
          example: true
          default: false
        conversation:
          type: array
          description: search for a specific conversation ids (or query)
          items:
            type: string
          example: ["conv123"]
        indexInConversation:
          type: number
          format: integer
          description: query by index of the sentence in conversation
          example: 10
        coreData:
          type: object
          $ref: '#/components/schemas/QADocumentCoreSearch'
        annotations:
          type: object
          $ref: '#/components/schemas/QADocumentAnnotationsSearch'
        status:
          type: number
          format: integer
          description: search documents with a specific state
          example: 0
        timestampGte:
          type: number
          format: long
          description: record insertion timestamp, if not specified no lower bound
          example: 1549283700000
        timestampLte:
          type: number
          format: long
          description: record insertion timestamp, if not specified no upper bound
          example: 1549283900000
        random:
          type: boolean
          description: add some random sampled document in the returned document list
          example: true
          default: false
    UpdateQATermsRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: "document id"
        tokenizer:
          type: string
          description: >-
            "the tokenizer to use (see TokenizersSet data structure for the available tokenizers)"
          example: "space_punctuation"
          default: "space_punctuation"
        commonOrSpecificSearchPrior:
          type: string
          description: extract prior statistics from the common tables or index specific tables
          enum:
            - COMMON
            - IDXSPECIFIC
          example: "IDXSPECIFIC"
          default: "COMMON"
        commonOrSpecificSearchObserved:
          type: string
          description: extract observed statistics from the common tables or index specific tables
          enum:
            - COMMON
            - IDXSPECIFIC
          example: "IDXSPECIFIC"
          default: "COMMON"
        observedDataSource:
          type: string
          description: extract observed statistics from knowledge base or the conversation log table
          enum:
            - KNOWLEDGEBASE
            - CONV_LOGS
          example: "KNOWLEDGEBASE"
          default: "KNOWLEDGEBASE"
        fieldsPrior:
          type: string
          description: fields to be used for the prior statistics
          enum:
            - question
            - answer
            - all
          example: "all"
          default: "all"
        fieldsObserved:
          type: string
          description: fields to be used for the observed statistics
          enum:
            - question
            - answer
            - all
          example: "all"
          default: "all"
        minWordsPerSentence:
          type: number
          format: integer
          description: the minimum amount of words on the sentence
          example: 10
          default: 10
        pruneTermsThreshold:
          type: number
          format: integer
          description: a threshold on the number of terms for trigger pruning
          example: 100000
          default: 100000
        misspellMaxOccurrence:
          type: number
          format: integer
          description: given a big enough sample, min freq beyond what we consider the token a misspell
          example: 10
          default: 5
        activePotentialDecay:
          type: number
          format: integer
          description: decay value for the active potential
          example: 15
          default: 10
        activePotential:
          type: boolean
          description: enable/disable the calculation of active potential
          example: false
          default: true
        totalInfo:
          type: boolean
          description: use the total information
          example: true
          default: false
    CountersCacheParameters:
      type: object
      properties:
        dictSizeCacheMaxSize:
          type: number
          format: integer
          description: max cache entries for dictionary size
          example: 500
          default: 1000
        totalTermsCacheMaxSize:
          type: number
          format: integer
          description: max cache entries for total terms counting
          example: 500
          default: 1000
        countTermCacheMaxSize:
          type: number
          format: integer
          description: max cache entries for index terms counting
          example: 200000
          default: 100000
        cacheStealTimeMillis:
          type: number
          format: integer
          description: max validity time for a cache entry
          example: 10000000
          default: 43200000
    CountersCacheSize:
      type: object
      required:
        - dictSizeCacheSize
        - totalTermsCacheSize
        - countTermCacheSize
      properties:
        dictSizeCacheSize:
          type: number
          format: integer
          description: cache size for index dictionary
          example: 1000
        totalTermsCacheSize:
          type: number
          format: integer
          description: cache size for index total terms count
          example: 1000
        countTermCacheSize:
          type: number
          format: integer
          description: cache size for index terms count
          example: 100000
    QASearchSortBy:
      type: string
      enum:
        - CONVERSATION
        - IDX_IN_CONVERSATION
        - TIMESTAMP
        - SCORE
      example: SCORE
      description: >-
        Sorting field for the QA documents:
          * `CONVERSATION` - sort by conversationId
          * `IDX_IN_CONVERSATION` - sort by indexInCoversation
          * `TIMESTAMP` - sort by insert timestamp
          * `SCORE` - sort by score
    SearchAlgorithm:
      type: string
      enum:
        - SHINGLES2
        - SHINGLES3
        - SHINGLES4
        - STEM_SHINGLES2
        - STEM_SHINGLES3
        - STEM_SHINGLES4
        - STEM_BOOST_EXACT
        - NGRAM2
        - STEM_NGRAM2
        - NGRAM3
        - STEM_NGRAM3
        - NGRAM4
        - STEM_NGRAM4
        - AUTO
        - DEFAULT
      example: NGRAM3
      description: >-
        Algorithm used for search:
          * `SHINGLES2` - word shingle with size 2 (unnormalized)
          * `SHINGLES3` - word shingle with size 3 (unnormalized)
          * `SHINGLES4` - word shingle with size 4 (unnormalized)
          * `STEM_SHINGLES2` - word shingle with stem and size 2 (unnormalized)
          * `STEM_SHINGLES3` - word shingle with stem and size 3 (unnormalized)
          * `STEM_SHINGLES4` - word shingle with stem and size 4 (unnormalized)
          * `STEM_BOOST_EXACT` - stemmed search with boost for exact match (unnormalized)
          * `NGRAM2` - character ngram search with size 2 (normalized 0-1)
          * `STEM_NGRAM2` - character stemmed ngram search with size 2 (normalized 0-1)
          * `NGRAM3` - character ngram search with size 3 (normalized 0-1)
          * `STEM_NGRAM3` - character stemmed ngram search with size 3 (normalized 0-1)
          * `NGRAM4` - character ngram search with size 4 (normalized 0-1)
          * `STEM_NGRAM4` - character stemmed ngram search with size 4 (normalized 0-1)
          * `AUTO` - StarChat choose which algorithm is better considering the query length
          * `DEFAULT` - AUTO
    BayesOperatorCacheServiceResponse:
      type: object
      properties:
        indexName:
          type: string
          description: indexName cache has been loaded
          example: index
        status:
          type: boolean
          description: if loading has been successful
          example: conv_id_1234
        message:
          type: string
          description: description containing error or number of elements loaded
    actionInput:
      type: array
      description: >-
        a list of JSON objects, the input passed to action's function (e.g., for show_buttons is button's description)
      items:
        type: object
        additionalProperties:
          type: string
      example: [
      {
        "state": "talktohuman",
        "label": "Talk to human",
        "type": "button",
        "url": "https://www.getjenny.com",
        "tag": "#human",
        "target": "_blank"
      },
      {
        "state": "feedback",
        "label": "insert a feedback",
        "type": "button",
        "url": "https://www.getjenny.com",
        "tag": "#feedback",
        "target": "_blank"
      }
      ]